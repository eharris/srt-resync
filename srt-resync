#!/usr/bin/env python3
"""
  Copyright (c) 2013, William Ting

  *  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 3, or (at your option)
  any later version.

  *  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  *  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
"""

import argparse
import os
import re
import shutil
import sys

from io import FileIO as file

VERSION = "0.1"

def parse_options():
    global VERSION

    parser = argparse.ArgumentParser(
            description = 'Offset srt subtitles.')

    parser.add_argument('offset', type = float)
    parser.add_argument('srt_file', type = file)
    parser.add_argument('-o', '--overwrite', action = "store_true", default = False,
            help = "overwite original file")
    parser.add_argument('--version', action = "version", version = "%(prog)s " + VERSION,
            help = "show version information and quit")

    return parser.parse_args()

def ts_to_secs(ts):
    "Takes timestamp in 'HH:MM:SS,mmm' form, returns seconds"
    hours, mins, secs, ms = [int(x) for x in ts.replace(',', ':').split(':')]
    return (hours * 3600) + (mins * 60) + secs + (ms / 1000)

def adjust_time(time_string, offset):
    "Takes timestamp string and offset, returns formatted timestamp string with offset applied"
    ts = ts_to_secs(time_string) + offset
    return '%02d:%02d:%02d,%03d' % (ts // 3600, ts % 3600 // 60, ts % 60, round((ts - int(ts)) * 1000))

def modify_file(options):
    if '.srt' not in options.srt_file.name:
        sys.exit("ERROR: invalid srt file")

    out_filename = os.path.splitext(options.srt_file.name)[0] + '-resync.srt'
    with open(options.srt_file.name, 'r', encoding = 'utf-8') as srt:
        line = srt.readline()  # read first line to determine line endings
        with open(out_filename, 'w', encoding = 'utf-8', newline = srt.newlines) as out:
            while line:
                match = re.search(r'^(\d+:\d+:\d+,\d+)\s+--\>\s+(\d+:\d+:\d+,\d+)', line)
                if match:
                    out.write("%s --> %s\n" % (
                        adjust_time(match.group(1), options.offset),
                        adjust_time(match.group(2), options.offset)
                        ))
                else:
                    out.write(line)
                line = srt.readline()

    if options.overwrite:
        shutil.move(out_filename, options.srt_file.name)

if __name__ == "__main__":
    modify_file(parse_options())
